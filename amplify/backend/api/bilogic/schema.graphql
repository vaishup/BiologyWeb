type TheShifts @model 
  @auth(rules: [
  { allow: public, provider: apiKey, operations: [read, create, update,delete]  } # Allow public read access
]) {
  id: ID!
  Location: String
  duties: String
  staffId: String
  time: String
  startTime: AWSDateTime
  endTime: AWSDateTime
  startDate: String
  endDate: String
  shiftstatus: String
  userId:String
}



type TheStaff
  @model
  @auth(
    rules: [
      { allow: owner, operations: [read, create, update, delete] },
      { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] },
      { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access
    ]
  ) {
  id: ID!
  name: String
  phoneNumber: String
  email: String
  DOB: String
  photourl: String
    @auth(
      rules: [
        { allow: owner, operations: [read, update] },
        { allow: groups, groups: ["Admin"], operations: [read, update] },
              { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access

      ]
    )
  isBiomatritcs: String
  profileStatus: String
  Location: String
    @auth(
      rules: [
        { allow: owner, operations: [read, update] },
        { allow: groups, groups: ["Admin"], operations: [read, update] },
              { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access

      ]
    )
  IsActive: String
    @auth(
      rules: [
        { allow: owner, operations: [read, update] },
        { allow: groups, groups: ["Admin"], operations: [read, update] },
              { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access

      ]
    )
  latitude: String
    @auth(
      rules: [
        { allow: owner, operations: [read, update] },
        { allow: groups, groups: ["Admin"], operations: [read, update] },
              { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access

      ]
    )
  longitude: String
    @auth(
      rules: [
        { allow: owner, operations: [read, update] },
        { allow: groups, groups: ["Admin"], operations: [read, update] },
              { allow: public, provider: apiKey, operations: [read ,update, create] } # Optional: Public read access

      ]
    )
  shiftIds: [String]
  userId: String
  employeeId: String
}


type TheAdminStaffUser @model 
 @auth(rules: [
  { allow: public, provider: apiKey, operations: [read, create, update] } # Allow public read access
]){
  id: ID!
  name: String
  phoneNumber: String
  email: String
  userType:String
}
